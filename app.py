
import os
import requests
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –Ω–µ —É–¥–≤–æ–∏—Ç—å
processed_hooks = set()


@app.get("/")
def root():
    return {"status": "running"}


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ ===
@app.post("/webhook")
async def webhook_listener(request: Request):
    try:
        data = await request.json()
    except Exception:
        return JSONResponse({"error": "Invalid JSON"}, status_code=400)

    hook_id = data.get("hash") or data.get("block_hash")
    if not hook_id:
        return JSONResponse({"error": "No unique ID in payload"}, status_code=400)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if hook_id in processed_hooks:
        return JSONResponse({"status": "duplicate ignored"}, status_code=200)
    processed_hooks.add(hook_id)

    # ‚ö° –¢–≤–æ—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:", data)

    return JSONResponse({"status": "ok"}, status_code=200)


# === –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ ===
def clear_old_webhooks(token: str):
    url = f"https://api.blockcypher.com/v1/ltc/main/hooks?token={token}"
    r = requests.get(url)
    if r.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤:", r.status_code, r.text)
        return

    hooks = r.json()
    if not hooks:
        print("‚ÑπÔ∏è –°—Ç–∞—Ä—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ—Ç")
        return

    for hook in hooks:
        hook_id = hook.get("id")
        if hook_id:
            del_url = f"https://api.blockcypher.com/v1/ltc/main/hooks/{hook_id}?token={token}"
            dr = requests.delete(del_url)
            if dr.status_code == 204:
                print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –≤–µ–±—Ö—É–∫ {hook_id}")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {hook_id}: {dr.status_code} {dr.text}")


# === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ ===
def register_webhook(token: str, callback_url: str, address: str, event: str = "confirmed-tx"):
    url = f"https://api.blockcypher.com/v1/ltc/main/hooks?token={token}"
    payload = {
        "event": event,
        "address": address,
        "url": callback_url
    }
    r = requests.post(url, json=payload)
    if r.status_code == 201:
        print("‚úÖ –ù–æ–≤—ã–π –≤–µ–±—Ö—É–∫ —Å–æ–∑–¥–∞–Ω:", r.json())
    elif r.status_code == 200:
        print("‚ÑπÔ∏è –í–µ–±—Ö—É–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", r.json())
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞:", r.status_code, r.text)


# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@app.on_event("startup")
def startup_event():
    token = os.getenv("BLOCKCYPHER_TOKEN")
    address = os.getenv("LTC_ADDRESS")
    service_url = os.getenv("RENDER_EXTERNAL_URL")  # Render –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    if not token or not address or not service_url:
        print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã BLOCKCYPHER_TOKEN, LTC_ADDRESS –∏–ª–∏ RENDER_EXTERNAL_URL")
        return

    callback_url = f"{service_url}/webhook"

    print("üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏...")
    clear_old_webhooks(token)

    print(f"üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –¥–ª—è {address} –Ω–∞ {callback_url}")
    register_webhook(token, callback_url, address, event="confirmed-tx")
